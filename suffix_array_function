#include <vector>
#include <cmath>
#include <algorithm>

std::vector<int64_t> suf_array(string s) {
    s.push_back(0);
    int n = s.length();
    std::vector<int64_t> c(n);
    std::vector<int64_t> pre(n);
    for (int i = 0; i < n; ++i) {
        pre[i] = i;
    }
    std::sort(pre.begin(), pre.end(), [&s](int64_t a, int64_t b) { return s[a] < s[b]; });
    c[pre[0]] = 0;
    for (int i = 1; i < n; ++i) {
        if (s[pre[i]] != s[pre[i - 1]])
            c[pre[i]] = c[pre[i - 1]] + 1;
        else
            c[pre[i]] = c[pre[i - 1]];
    }
    int m = static_cast<int>(ceil(log2(n)));
    for (int i = 1; i <= m; ++i) {
        int len = static_cast<int>(pow(2, i - 1));
        std::sort(pre.begin(), pre.end(),
             [&c, len, n](int64_t a, int64_t b) {
                 if (c[a] != c[b])
                     return c[a] < c[b];
                 else {
                     return c[(a + len) % n] < c[(b + len) % n];
                 }
             });
        std::vector<int64_t> new_c(n);
        new_c[pre[0]] = 0;
        for (int j = 1; j < n; ++j) {
            if (c[pre[j]] != c[pre[j - 1]])
                new_c[pre[j]] = new_c[pre[j - 1]] + 1;
            else if (c[(pre[j] + len) % n] != c[(pre[j - 1] + len) % n])
                new_c[pre[j]] = new_c[pre[j - 1]] + 1;
            else
                new_c[pre[j]] = new_c[pre[j - 1]];
        }
        std::swap(c, new_c);
    }
    pre.erase(pre.begin());
    return pre;
}
